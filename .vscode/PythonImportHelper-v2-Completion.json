[
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "bag",
        "kind": 2,
        "importPath": "Python_exercices.Bag_Algorithm.bag",
        "description": "Python_exercices.Bag_Algorithm.bag",
        "peekOfCode": "def bag(weight, weights):\n    if weight <= 0:\n        return None\n    # Sort the available weights in ascending order (to iterate downwards by index)\n    we = sorted(weights.keys)\n    # Start from the heaviest object index\n    index = len(we) - 1\n    # While the knapsack capacity is not filled and we still have weights to consider\n    while weight != 0 and index >= 0:\n        # If current weight is heavier than remaining capacity OR none available, skip",
        "detail": "Python_exercices.Bag_Algorithm.bag",
        "documentation": {}
    },
    {
        "label": "weights",
        "kind": 5,
        "importPath": "Python_exercices.Bag_Algorithm.bag",
        "description": "Python_exercices.Bag_Algorithm.bag",
        "peekOfCode": "weights = {1: 5, 2: 3, 5: 2, 10: 1, 20: 1, 50: 1}\nbag(100, weights.copy())\nprint('\\n')\nbag(0, weights.copy())",
        "detail": "Python_exercices.Bag_Algorithm.bag",
        "documentation": {}
    },
    {
        "label": "bubble_sort",
        "kind": 2,
        "importPath": "Python_exercices.Binary_Search.binary_search",
        "description": "Python_exercices.Binary_Search.binary_search",
        "peekOfCode": "def bubble_sort(list):\n    n = len(list) - 1\n    for i in range(n):\n        for j in range(n - i):\n            if list[j] > list[j+1]:\n                list[j] , list[j+1] = list[j+1] , list[j]\n    return list\ndef binary_search(list,objetive):\n    n = len(list) \n    start=0",
        "detail": "Python_exercices.Binary_Search.binary_search",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "Python_exercices.Binary_Search.binary_search",
        "description": "Python_exercices.Binary_Search.binary_search",
        "peekOfCode": "def binary_search(list,objetive):\n    n = len(list) \n    start=0\n    end=n-1\n    while start <= end:\n        center = (start + end) // 2\n        if list[center] == objetive:\n             return center\n        elif list[center] < objetive:\n             start = center + 1",
        "detail": "Python_exercices.Binary_Search.binary_search",
        "documentation": {}
    },
    {
        "label": "pre_order",
        "kind": 2,
        "importPath": "Python_exercices.Binary_Search_Tree.binary",
        "description": "Python_exercices.Binary_Search_Tree.binary",
        "peekOfCode": "def pre_order(tree,level=0):\n   if tree == []:\n       return\n   print(f'level {level} -> {str(tree[0])}') # root\n   pre_order(tree[1],level + 1) # left son\n   pre_order(tree[2],level + 1) #right son\n   '''\n   Generame un layer para publicacion de linkedin en el q pongas unos logos super lindos tematica programacion y digas al publicao sobre mi repositorio de programacion donde hay varios ejercicios de programacion para mejorar la logica entre varios temas esta Brute Force\nRecursion\nLinear and binary searches",
        "detail": "Python_exercices.Binary_Search_Tree.binary",
        "documentation": {}
    },
    {
        "label": "bubble_sort",
        "kind": 2,
        "importPath": "Python_exercices.Bubble_Sort.bubble_sort",
        "description": "Python_exercices.Bubble_Sort.bubble_sort",
        "peekOfCode": "def bubble_sort(list):\n    n = len(list)\n    if n < 0:\n        return None\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if list[j] > list[j+1]:\n                list[j] , list[j+1] = list[j+1] , list[j]\n    return list\narr = [45,43,21,12,67,54,123,543,765,897]",
        "detail": "Python_exercices.Bubble_Sort.bubble_sort",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "Python_exercices.Bubble_Sort.bubble_sort",
        "description": "Python_exercices.Bubble_Sort.bubble_sort",
        "peekOfCode": "arr = [45,43,21,12,67,54,123,543,765,897]\nprint(bubble_sort(arr))",
        "detail": "Python_exercices.Bubble_Sort.bubble_sort",
        "documentation": {}
    },
    {
        "label": "sum_generate",
        "kind": 2,
        "importPath": "Python_exercices.Combinational_Sum_Problem.combinational",
        "description": "Python_exercices.Combinational_Sum_Problem.combinational",
        "peekOfCode": "def sum_generate(target):\n    if target < 0 or not isinstance(target,int):\n        return\n    result=[]\n    def backtracking(surplus,combination,start):\n         if surplus == 0:\n             result.append(combination[:])\n             return\n         for num in range(start,target + 1):\n             if num > surplus:",
        "detail": "Python_exercices.Combinational_Sum_Problem.combinational",
        "documentation": {}
    },
    {
        "label": "backtracking_combinations",
        "kind": 2,
        "importPath": "Python_exercices.Combinations.combinations",
        "description": "Python_exercices.Combinations.combinations",
        "peekOfCode": "def backtracking_combinations(arrays,index,current_combination,result):\n    if index == len(arrays):\n        result.append(current_combination[:])\n        return\n    for element in arrays[index]:\n        current_combination.append(element)\n        backtracking_combinations(arrays,index + 1,current_combination,result)\n        current_combination.pop()\nfruits=['Apple','Banana','Pear']\nprize=[100,200,300]",
        "detail": "Python_exercices.Combinations.combinations",
        "documentation": {}
    },
    {
        "label": "decimal_binary",
        "kind": 2,
        "importPath": "Python_exercices.Decimals_Binary.decimal_binary",
        "description": "Python_exercices.Decimals_Binary.decimal_binary",
        "peekOfCode": "def decimal_binary(number):\n     if number > 1:\n         decimal_binary(number // 2)\n     print(number % 2,end=\"\")\ndecimal_binary(12)\nprint()\ndecimal_binary(122)",
        "detail": "Python_exercices.Decimals_Binary.decimal_binary",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "Python_exercices.Factorial.factorial",
        "description": "Python_exercices.Factorial.factorial",
        "peekOfCode": "def factorial(number):\n    if number == 0:\n        return 1\n    return number * factorial(number - 1)\nprint(factorial(5))\nprint(factorial(4))\nprint(factorial(3))",
        "detail": "Python_exercices.Factorial.factorial",
        "documentation": {}
    },
    {
        "label": "fibo",
        "kind": 2,
        "importPath": "Python_exercices.Fibonacci.fibonacci",
        "description": "Python_exercices.Fibonacci.fibonacci",
        "peekOfCode": "def fibo(index):\n    if index == 0 or index == 1:\n        return 1\n    return fibo(index - 1) + fibo(index - 2)\nprint(fibo(0))\nprint(fibo(1))\nprint(fibo(4))\nprint(fibo(2))",
        "detail": "Python_exercices.Fibonacci.fibonacci",
        "documentation": {}
    },
    {
        "label": "fizz_buzz",
        "kind": 2,
        "importPath": "Python_exercices.Fizz_Buzz.fizz_buzz",
        "description": "Python_exercices.Fizz_Buzz.fizz_buzz",
        "peekOfCode": "def fizz_buzz():\n    for i in range(1,101):\n        result = f'{i} -> FizzBuzz' if i % 3 == 0 and i % 5 == 0 else \\\n                 f'{i} -> Fizz' if i % 3 == 0 else \\\n                 f'{i} -> Buzz' if i % 5 == 0 else \\\n                 str(f'{i} -> No match')\n        print(result)\nfizz_buzz()",
        "detail": "Python_exercices.Fizz_Buzz.fizz_buzz",
        "documentation": {}
    },
    {
        "label": "show_graph",
        "kind": 2,
        "importPath": "Python_exercices.Graph_Traversal.graph",
        "description": "Python_exercices.Graph_Traversal.graph",
        "peekOfCode": "def show_graph(graph):\n    if len(graph) == 0:\n        print('Graph is null')\n        return\n    for node,edges in graph.items():\n         for dest,weight in edges:\n             print(f'({node}) -> ({dest}) -> with weight {weight}')\ngraph={\n    1:[(2,10),(4,30)],\n    2:[(1,10),(3,20)],",
        "detail": "Python_exercices.Graph_Traversal.graph",
        "documentation": {}
    },
    {
        "label": "lineal_search_recursion",
        "kind": 2,
        "importPath": "Python_exercices.LIneal_Search.lineal",
        "description": "Python_exercices.LIneal_Search.lineal",
        "peekOfCode": "def lineal_search_recursion(list,element,position):\n     if position < 0 or position > len(list) -1:\n        return None\n     if list[position] == element:\n         return position\n     return lineal_search_recursion(list,element,position + 1)\narr = [12,34,12,21,54,23,56]\nprint(lineal_search_recursion(arr,21,0))",
        "detail": "Python_exercices.LIneal_Search.lineal",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "Python_exercices.LIneal_Search.lineal",
        "description": "Python_exercices.LIneal_Search.lineal",
        "peekOfCode": "arr = [12,34,12,21,54,23,56]\nprint(lineal_search_recursion(arr,21,0))",
        "detail": "Python_exercices.LIneal_Search.lineal",
        "documentation": {}
    },
    {
        "label": "palindrome",
        "kind": 2,
        "importPath": "Python_exercices.Palindrome.palindrome",
        "description": "Python_exercices.Palindrome.palindrome",
        "peekOfCode": "def palindrome(string):     \n     string=string.strip()\n     n = len(string) - 1\n     i = 0\n     while i <= n // 2: \n         if string[i].lower() != string[n - i].lower():\n             return False\n         i += 1\n     return True        \nprint(palindrome('racecar'))    # True (Palindrome)",
        "detail": "Python_exercices.Palindrome.palindrome",
        "documentation": {}
    },
    {
        "label": "quick_sort",
        "kind": 2,
        "importPath": "Python_exercices.Quick_Sort.quick_sort",
        "description": "Python_exercices.Quick_Sort.quick_sort",
        "peekOfCode": "def quick_sort(list):\n    if len(list) <= 1:\n        return list\n    piv = list[0]\n    lower = [ x for x in list[1:] if x <= piv ]\n    higher = [ x for x in list[1:] if x > piv ]\n    return quick_sort(lower) + [piv] + quick_sort(higher)\narr = [23,21,43,23,65,11,987,678,456]\nresult = quick_sort(arr)\nprint(result)",
        "detail": "Python_exercices.Quick_Sort.quick_sort",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "Python_exercices.Quick_Sort.quick_sort",
        "description": "Python_exercices.Quick_Sort.quick_sort",
        "peekOfCode": "arr = [23,21,43,23,65,11,987,678,456]\nresult = quick_sort(arr)\nprint(result)",
        "detail": "Python_exercices.Quick_Sort.quick_sort",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Python_exercices.Quick_Sort.quick_sort",
        "description": "Python_exercices.Quick_Sort.quick_sort",
        "peekOfCode": "result = quick_sort(arr)\nprint(result)",
        "detail": "Python_exercices.Quick_Sort.quick_sort",
        "documentation": {}
    },
    {
        "label": "reversing",
        "kind": 2,
        "importPath": "Python_exercices.Reversing_Number.reversing_number",
        "description": "Python_exercices.Reversing_Number.reversing_number",
        "peekOfCode": "def reversing(number):\n        print(number % 10,end='')\n        if number > number % 10:\n            reversing(number // 10)\nreversing(123)\nprint()\nreversing(456)\nprint()\nreversing(996)",
        "detail": "Python_exercices.Reversing_Number.reversing_number",
        "documentation": {}
    },
    {
        "label": "reversing",
        "kind": 2,
        "importPath": "Python_exercices.Reversing_Strings.reversing_strings",
        "description": "Python_exercices.Reversing_Strings.reversing_strings",
        "peekOfCode": "def reversing(string):\n    i = len(string) - 1\n    while i >= 0:\n        print(string[i],end='')\n        i -= 1\nreversing(\"Hello World\")\nprint()\nreversing(\"How can i help you?\")",
        "detail": "Python_exercices.Reversing_Strings.reversing_strings",
        "documentation": {}
    },
    {
        "label": "game",
        "kind": 2,
        "importPath": "Python_exercices.Rock_Paper_Scissors.rock_paper_scissors",
        "description": "Python_exercices.Rock_Paper_Scissors.rock_paper_scissors",
        "peekOfCode": "def game(election, machine_election, table=None, index=0, history=None):\n    if table is None:\n        table = {\"you\": 0, \"machine\": 0}\n    if history is None:\n        history = []\n    # Base case: if someone reached 2 wins or no more moves\n    if table[\"you\"] == 2 or table[\"machine\"] == 2 or index >= len(election):\n        return table, history\n    # Store choices this round\n    history.append((election[index], machine_election[index]))",
        "detail": "Python_exercices.Rock_Paper_Scissors.rock_paper_scissors",
        "documentation": {}
    },
    {
        "label": "your_win_case",
        "kind": 5,
        "importPath": "Python_exercices.Rock_Paper_Scissors.rock_paper_scissors",
        "description": "Python_exercices.Rock_Paper_Scissors.rock_paper_scissors",
        "peekOfCode": "your_win_case = {\n    \"rock\": \"scissors\",\n    \"scissors\": \"paper\",\n    \"paper\": \"rock\"\n}\ndef game(election, machine_election, table=None, index=0, history=None):\n    if table is None:\n        table = {\"you\": 0, \"machine\": 0}\n    if history is None:\n        history = []",
        "detail": "Python_exercices.Rock_Paper_Scissors.rock_paper_scissors",
        "documentation": {}
    },
    {
        "label": "plays",
        "kind": 5,
        "importPath": "Python_exercices.Rock_Paper_Scissors.rock_paper_scissors",
        "description": "Python_exercices.Rock_Paper_Scissors.rock_paper_scissors",
        "peekOfCode": "plays = ['rock', 'scissors', 'paper']\n# elections\nelection = ['rock', \"scissors\", 'rock']\nmachine_election = [random.choice(plays) for _ in range(3)]\nresult, history = game(election, machine_election, None, 0, None)\nprint(\"Your choices:     \", election)\nprint(\"Machine choices:  \", machine_election)\nprint(\"Round history (You, Machine):\")\nfor i, (y, m) in enumerate(history, 1):\n    print(f\"Round {i}: You -> {y} | Machine -> {m}\")",
        "detail": "Python_exercices.Rock_Paper_Scissors.rock_paper_scissors",
        "documentation": {}
    },
    {
        "label": "election",
        "kind": 5,
        "importPath": "Python_exercices.Rock_Paper_Scissors.rock_paper_scissors",
        "description": "Python_exercices.Rock_Paper_Scissors.rock_paper_scissors",
        "peekOfCode": "election = ['rock', \"scissors\", 'rock']\nmachine_election = [random.choice(plays) for _ in range(3)]\nresult, history = game(election, machine_election, None, 0, None)\nprint(\"Your choices:     \", election)\nprint(\"Machine choices:  \", machine_election)\nprint(\"Round history (You, Machine):\")\nfor i, (y, m) in enumerate(history, 1):\n    print(f\"Round {i}: You -> {y} | Machine -> {m}\")\nprint(\"Final score:      \", result)\nif result[\"you\"] > result[\"machine\"]:",
        "detail": "Python_exercices.Rock_Paper_Scissors.rock_paper_scissors",
        "documentation": {}
    },
    {
        "label": "machine_election",
        "kind": 5,
        "importPath": "Python_exercices.Rock_Paper_Scissors.rock_paper_scissors",
        "description": "Python_exercices.Rock_Paper_Scissors.rock_paper_scissors",
        "peekOfCode": "machine_election = [random.choice(plays) for _ in range(3)]\nresult, history = game(election, machine_election, None, 0, None)\nprint(\"Your choices:     \", election)\nprint(\"Machine choices:  \", machine_election)\nprint(\"Round history (You, Machine):\")\nfor i, (y, m) in enumerate(history, 1):\n    print(f\"Round {i}: You -> {y} | Machine -> {m}\")\nprint(\"Final score:      \", result)\nif result[\"you\"] > result[\"machine\"]:\n    print(\"You won the best 2 out of 3!\")",
        "detail": "Python_exercices.Rock_Paper_Scissors.rock_paper_scissors",
        "documentation": {}
    },
    {
        "label": "subsets",
        "kind": 2,
        "importPath": "Python_exercices.Subsets_Permutations.permutations",
        "description": "Python_exercices.Subsets_Permutations.permutations",
        "peekOfCode": "def subsets(list,index=0,subset=[]):\n     if index == len(list):\n       print(subset)\n       return\n     # not including the subset\n     subsets(list,index + 1,subset)\n     # including the subset\n     subsets(list,index + 1,subset + [list[index]])\nset = [1,2,3]\nsubsets(set)",
        "detail": "Python_exercices.Subsets_Permutations.permutations",
        "documentation": {}
    },
    {
        "label": "set",
        "kind": 5,
        "importPath": "Python_exercices.Subsets_Permutations.permutations",
        "description": "Python_exercices.Subsets_Permutations.permutations",
        "peekOfCode": "set = [1,2,3]\nsubsets(set)",
        "detail": "Python_exercices.Subsets_Permutations.permutations",
        "documentation": {}
    }
]