[
    {
        "label": "bag",
        "kind": 2,
        "importPath": "Bag_Algorithm.bag",
        "description": "Bag_Algorithm.bag",
        "peekOfCode": "def bag(weight, weights):\n    if weight <= 0:\n        return None\n    # Sort the available weights in ascending order (to iterate downwards by index)\n    we = sorted(weights.keys)\n    # Start from the heaviest object index\n    index = len(we) - 1\n    # While the knapsack capacity is not filled and we still have weights to consider\n    while weight != 0 and index >= 0:\n        # If current weight is heavier than remaining capacity OR none available, skip",
        "detail": "Bag_Algorithm.bag",
        "documentation": {}
    },
    {
        "label": "weights",
        "kind": 5,
        "importPath": "Bag_Algorithm.bag",
        "description": "Bag_Algorithm.bag",
        "peekOfCode": "weights = {1: 5, 2: 3, 5: 2, 10: 1, 20: 1, 50: 1}\nbag(100, weights.copy())\nprint('\\n')\nbag(0, weights.copy())",
        "detail": "Bag_Algorithm.bag",
        "documentation": {}
    },
    {
        "label": "bubble_sort",
        "kind": 2,
        "importPath": "Binary_Search.binary_search",
        "description": "Binary_Search.binary_search",
        "peekOfCode": "def bubble_sort(list):\n    n = len(list) - 1\n    for i in range(n):\n        for j in range(n - i):\n            if list[j] > list[j+1]:\n                list[j] , list[j+1] = list[j+1] , list[j]\n    return list\ndef binary_search(list,objetive):\n    n = len(list) \n    start=0",
        "detail": "Binary_Search.binary_search",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "Binary_Search.binary_search",
        "description": "Binary_Search.binary_search",
        "peekOfCode": "def binary_search(list,objetive):\n    n = len(list) \n    start=0\n    end=n-1\n    while start <= end:\n        center = (start + end) // 2\n        if list[center] == objetive:\n             return center\n        elif list[center] < objetive:\n             start = center + 1",
        "detail": "Binary_Search.binary_search",
        "documentation": {}
    },
    {
        "label": "bubble_sort",
        "kind": 2,
        "importPath": "Bubble_Sort.bubble_sort",
        "description": "Bubble_Sort.bubble_sort",
        "peekOfCode": "def bubble_sort(list):\n    n = len(list)\n    if n < 0:\n        return None\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if list[j] > list[j+1]:\n                list[j] , list[j+1] = list[j+1] , list[j]\n    return list\narr = [45,43,21,12,67,54,123,543,765,897]",
        "detail": "Bubble_Sort.bubble_sort",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "Bubble_Sort.bubble_sort",
        "description": "Bubble_Sort.bubble_sort",
        "peekOfCode": "arr = [45,43,21,12,67,54,123,543,765,897]\nprint(bubble_sort(arr))",
        "detail": "Bubble_Sort.bubble_sort",
        "documentation": {}
    },
    {
        "label": "backtracking_combinations",
        "kind": 2,
        "importPath": "Combinations.combinations",
        "description": "Combinations.combinations",
        "peekOfCode": "def backtracking_combinations(arrays,index,current_combination,result):\n    if index == len(arrays):\n        result.append(current_combination[:])\n        return\n    for element in arrays[index]:\n        current_combination.append(element)\n        backtracking_combinations(arrays,index + 1,current_combination,result)\n        current_combination.pop()\nfruits=['Apple','Banana','Pear']\nprize=[100,200,300]",
        "detail": "Combinations.combinations",
        "documentation": {}
    },
    {
        "label": "decimal_binary",
        "kind": 2,
        "importPath": "Decimals_Binary.decimal_binary",
        "description": "Decimals_Binary.decimal_binary",
        "peekOfCode": "def decimal_binary(number):\n     if number > 1:\n         decimal_binary(number // 2)\n     print(number % 2,end=\"\")\ndecimal_binary(12)\nprint()\ndecimal_binary(122)",
        "detail": "Decimals_Binary.decimal_binary",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "Factorial.factorial",
        "description": "Factorial.factorial",
        "peekOfCode": "def factorial(number):\n    if number == 0:\n        return 1\n    return number * factorial(number - 1)\nprint(factorial(5))\nprint(factorial(4))\nprint(factorial(3))",
        "detail": "Factorial.factorial",
        "documentation": {}
    },
    {
        "label": "fibo",
        "kind": 2,
        "importPath": "Fibonacci.fibonacci",
        "description": "Fibonacci.fibonacci",
        "peekOfCode": "def fibo(index):\n    if index == 0 or index == 1:\n        return 1\n    return fibo(index - 1) + fibo(index - 2)\nprint(fibo(0))\nprint(fibo(1))\nprint(fibo(4))\nprint(fibo(2))",
        "detail": "Fibonacci.fibonacci",
        "documentation": {}
    },
    {
        "label": "fizz_buzz",
        "kind": 2,
        "importPath": "Fizz_Buzz.fizz_buzz",
        "description": "Fizz_Buzz.fizz_buzz",
        "peekOfCode": "def fizz_buzz():\n    for i in range(1,101):\n        result = f'{i} -> FizzBuzz' if i % 3 == 0 and i % 5 == 0 else \\\n                 f'{i} -> Fizz' if i % 3 == 0 else \\\n                 f'{i} -> Buzz' if i % 5 == 0 else \\\n                 str(f'{i} -> No match')\n        print(result)\nfizz_buzz()",
        "detail": "Fizz_Buzz.fizz_buzz",
        "documentation": {}
    },
    {
        "label": "lineal_search_recursion",
        "kind": 2,
        "importPath": "LIneal_Search.lineal",
        "description": "LIneal_Search.lineal",
        "peekOfCode": "def lineal_search_recursion(list,element,position):\n     if position < 0 or position > len(list) -1:\n        return None\n     if list[position] == element:\n         return position\n     return lineal_search_recursion(list,element,position + 1)\narr = [12,34,12,21,54,23,56]\nprint(lineal_search_recursion(arr,21,0))",
        "detail": "LIneal_Search.lineal",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "LIneal_Search.lineal",
        "description": "LIneal_Search.lineal",
        "peekOfCode": "arr = [12,34,12,21,54,23,56]\nprint(lineal_search_recursion(arr,21,0))",
        "detail": "LIneal_Search.lineal",
        "documentation": {}
    },
    {
        "label": "palindrome",
        "kind": 2,
        "importPath": "Palindrome.palindrome",
        "description": "Palindrome.palindrome",
        "peekOfCode": "def palindrome(string):     \n     n = len(string) - 1\n     i = 0\n     while i <= n // 2: \n         if string[i].lower() != string[n - i].lower():\n             return False\n         i += 1\n     return True        \nprint(palindrome('racecar'))    # True (Palindrome)\nprint(palindrome('RaceCar'))    # True (Case insensitive)",
        "detail": "Palindrome.palindrome",
        "documentation": {}
    },
    {
        "label": "quick_sort",
        "kind": 2,
        "importPath": "Quick_Sort.quick_sort",
        "description": "Quick_Sort.quick_sort",
        "peekOfCode": "def quick_sort(list):\n    if len(list) <= 1:\n        return list\n    piv = list[0]\n    lower = [ x for x in list[1:] if x <= piv ]\n    higher = [ x for x in list[1:] if x > piv ]\n    return quick_sort(lower) + [piv] + quick_sort(higher)\narr = [23,21,43,23,65,11,987,678,456]\nresult = quick_sort(arr)\nprint(result)",
        "detail": "Quick_Sort.quick_sort",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "Quick_Sort.quick_sort",
        "description": "Quick_Sort.quick_sort",
        "peekOfCode": "arr = [23,21,43,23,65,11,987,678,456]\nresult = quick_sort(arr)\nprint(result)",
        "detail": "Quick_Sort.quick_sort",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Quick_Sort.quick_sort",
        "description": "Quick_Sort.quick_sort",
        "peekOfCode": "result = quick_sort(arr)\nprint(result)",
        "detail": "Quick_Sort.quick_sort",
        "documentation": {}
    },
    {
        "label": "reversing",
        "kind": 2,
        "importPath": "Reversing_Strings.reversing_strings",
        "description": "Reversing_Strings.reversing_strings",
        "peekOfCode": "def reversing(string):\n    i = len(string) - 1\n    while i >= 0:\n        print(string[i],end='')\n        i -= 1\nreversing(\"Hello World\")\nprint()\nreversing(\"How can i help you?\")",
        "detail": "Reversing_Strings.reversing_strings",
        "documentation": {}
    },
    {
        "label": "subsets",
        "kind": 2,
        "importPath": "Subsets_Permutations.permutations",
        "description": "Subsets_Permutations.permutations",
        "peekOfCode": "def subsets(list,index=0,subset=[]):\n     if index == len(list):\n       print(subset)\n       return\n     # not including the subset\n     subsets(list,index + 1,subset)\n     # including the subset\n     subsets(list,index + 1,subset + [list[index]])\nset = [1,2,3]\nsubsets(set)",
        "detail": "Subsets_Permutations.permutations",
        "documentation": {}
    },
    {
        "label": "set",
        "kind": 5,
        "importPath": "Subsets_Permutations.permutations",
        "description": "Subsets_Permutations.permutations",
        "peekOfCode": "set = [1,2,3]\nsubsets(set)",
        "detail": "Subsets_Permutations.permutations",
        "documentation": {}
    }
]